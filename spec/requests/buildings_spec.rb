require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/buildings", type: :request do
  before do
    sign_in(create(:user, admin: true))
  end

  # Building. As you add validations to Building, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    Building.new(name: "Main Building", location_longitude: -180, location_latitude: -90,
                 owners: [create(:user)]).attributes
  end

  let(:invalid_attributes) do
    Building.new(name: "does not exist", location_longitude: -1000, location_latitude: 500,
                 owners: [create(:user)]).attributes
  end

  describe "GET /index" do
    it "renders a successful response" do
      Building.create! valid_attributes
      get buildings_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      building = Building.create! valid_attributes
      get building_url(building)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_building_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      building = Building.create! valid_attributes
      get edit_building_url(building)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Building" do
        expect do
          post buildings_url, params: { building: valid_attributes }
        end.to change(Building, :count).by(1)
      end

      it "redirects to the user editing page" do
        post buildings_url, params: { building: valid_attributes }
        expect(response).to redirect_to(edit_user_registration_path)
      end
    end

    context "with invalid parameters" do
      it "does not create a new Building" do
        expect do
          post buildings_url, params: { building: invalid_attributes }
        end.to change(Building, :count).by(0)
      end

      it "renders an unprocessable_entity response (i.e. to display the 'new' template)" do
        post buildings_url, params: { building: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      new_building = Building.new(name: "ABC", location_longitude: 12, location_latitude: 13)
      let(:new_attributes) do
        new_building.attributes
      end

      it "updates the requested building" do
        building = Building.create! valid_attributes
        patch building_url(building), params: { building: new_attributes }
        building.reload
        expect(building.name).to eq(new_building.name)
        expect(building.location_longitude).to eq(new_building.location_longitude)
        expect(building.location_latitude).to eq(new_building.location_latitude)
      end

      it "redirects to the user editing page" do
        building = Building.create! valid_attributes
        patch building_url(building), params: { building: new_attributes }
        building.reload
        expect(response).to redirect_to(edit_user_registration_path)
      end
    end

    context "with invalid parameters" do
      it "renders an unprocessable_entity response (i.e. to display the 'edit' template)" do
        building = Building.create! valid_attributes
        patch building_url(building), params: { building: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested building" do
      building = Building.create! valid_attributes
      expect do
        delete building_url(building)
      end.to change(Building, :count).by(-1)
    end

    it "redirects to the user editing page" do
      building = Building.create! valid_attributes
      delete building_url(building)
      expect(response).to redirect_to(edit_user_registration_path)
    end
  end
end
