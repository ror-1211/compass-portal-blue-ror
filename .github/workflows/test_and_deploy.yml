name: Test and deploy

on:
  push:
    branches: [ main, dev ]
  # Allow manual triggering
  workflow_dispatch:

jobs:
  # Name of the job
  rspec-test:
    runs-on: ubuntu-latest

    # https://docs.github.com/en/actions/using-containerized-services/creating-postgresql-service-containers
    # Service containers to run with job `test`
    services:
      postgres:
        # Docker Hub image
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_DB: test
          # should not be empty
          # https://stackoverflow.com/questions/60618118#answer-60618750
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        # Maps tcp port 5432 on service container to the host
        ports: ["5432:5432"]

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      # https://github.com/ruby/setup-ruby
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7 # Not needed with a .ruby-version file
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically

      # https://github.com/actions/cache/blob/master/examples.md#node---yarn
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Build yarn cache
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      - name: Install yarn packages
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install

      - name: Build compiled assets cache
        uses: actions/cache@v2
        id: assets-cache
        with:
          path: public/
          key: ${{ runner.os }}-assets-${{ hashFiles('**/public/packs-test/manifest.json') }}

      - name: Compile assets
        if: steps.assets-cache.outputs.cache-hit != 'true'
        run: bin/rails assets:precompile

      - name: Run tests (PostgreSQL)
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
          RAILS_ENV: test
        # Don't run RSpec with . https://olivierlacan.com/posts/a-tiny-little-dot/
        # Show rspec errors as GH annotations https://github.com/Drieam/rspec-github#usage
        run: |
          cp config/database.ci.yml config/database.yml
          bundle exec rails db:setup
          bundle exec rspec spec/ --format documentation --format RSpec::Github::Formatter

  # Name of the job
  deploy:
    # Deploy the main branch
    if: github.ref == 'refs/heads/main'
    # test job must succeed before this job is started
    needs: rspec-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # https://github.com/marketplace/actions/deploy-to-heroku
      - name: Deploy main to Heroku
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: "compass-blue" #Must be unique in Heroku
          heroku_email: "hpi.swt2+heroku@gmail.com"
